{"version":3,"sources":["assets\\Scripts\\BirdControl.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEM,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAAyC,+BAAY;IAArD;QAAA,qEAwDC;QAtDG,eAAe;QACf,WAAK,GAAW,CAAC,CAAC;QAClB,iBAAW,GAAgB,IAAI,CAAC;;IAoDpC,CAAC;IAnDG,4BAAM,GAAN;QACI,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QACnF,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QACnF,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;IAC3E,CAAC;IAGD,4BAAM,GAAN,UAAQ,EAAU;QACf,6DAA6D;QAC3D,cAAc;QACf,GAAG;QACH,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC;QACnB,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC;QAE1B,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,GAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QACjC,IAAI,KAAK,IAAI,EAAE,EAAE;YACb,KAAK,GAAG,EAAE,CAAC;SACd;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QAC3B,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YAC3C,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;YAC5B,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;SAClB;IACL,CAAC;IAED,kCAAY,GAAZ,UAAc,KAA0B;QACpC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACnB,CAAC;IACD;;;QAGI;IAEJ,sCAAgB,GAAhB,UAAkB,KAAkB,EAAE,IAAiB;QACnD,oFAAoF;QAIpF,IAAI,KAAK,CAAC,GAAG,KAAK,CAAC,EAAE;YACjB,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;YAC5B,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;SAClB;QACD,sEAAsE;aACjE,IAAI,KAAK,CAAC,GAAG,KAAK,CAAC,EAAE;YACtB,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC;YAC7B,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;SAC9E;IACL,CAAC;IArDgB,WAAW;QAD/B,OAAO;OACa,WAAW,CAwD/B;IAAD,kBAAC;CAxDD,AAwDC,CAxDwC,EAAE,CAAC,SAAS,GAwDpD;kBAxDoB,WAAW","file":"","sourceRoot":"/","sourcesContent":["import MainControl, { GameStatus } from \"./MainControl\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BirdControl extends cc.Component {\r\n\r\n    //Speed of bird\r\n    speed: number = 0;\r\n    mainControl: MainControl = null;\r\n    onLoad () {\r\n        cc.Canvas.instance.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        cc.Canvas.instance.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.mainControl = cc.Canvas.instance.node.getComponent(\"MainControl\");\r\n    }\r\n\r\n    \r\n    update (dt: number) {\r\n       //if(this.mainControl.gameStatus != GameStatus.Game_Playing){\r\n         //  // return;\r\n        //}\r\n        this.speed -= 0.05;\r\n        this.node.y += this.speed;\r\n\r\n        var angle = -(this.speed/2) * 30;\r\n        if (angle >= 30) {\r\n            angle = 30;\r\n        }\r\n        this.node.rotation = angle;\r\n        if (this.node.y >= 256 || this.node.y <= -256) {\r\n            this.mainControl.gameOver();\r\n            this.speed = 0;\r\n        }\r\n    }\r\n\r\n    onTouchStart (event: cc.Event.EventTouch) {\r\n        this.speed = 2;\r\n    }\r\n    /**onCollisionEnter (other: cc.Collider, self: cc.Collider) {\r\n        //game over\r\n        cc.log(\"game over\");\r\n    }**/\r\n   \r\n    onCollisionEnter (other: cc.Collider, self: cc.Collider) {\r\n        // collider tag is 0, that means the bird have a collision with pipe, then game over\r\n          \r\n       \r\n        \r\n        if (other.tag === 0) {\r\n            cc.log(\"game over\");\r\n            this.mainControl.gameOver();\r\n            this.speed = 0;\r\n        }\r\n        // collider tag is 1, that means the bird cross a pipe, then add score\r\n        else if (other.tag === 1) {\r\n            this.mainControl.gameScore++;\r\n            this.mainControl.labelScore.string = this.mainControl.gameScore.toString();\r\n        }\r\n    }\r\n    \r\n    \r\n}\r\n"]}